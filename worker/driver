#!/bin/sh 

# Note that the short arguments are used for OSx and Ubuntu comptability

if tty -s ; then
  ONTTY=-s
  set -x
else
  ONTTY=
fi

if [ -s /tmp/worker.pid ] ; then
    if kill -0 `cat /tmp/worker.pid` ; then
        logger $ONTTY -i -t WORKER -p user.notice Process `cat /tmp/worker.pid` still running. Exiting.
        exit 0
    else
        logger $ONTTY -i -t WORKER -p user.notice Process `cat /tmp/worker.pid` died.  Starting anew.
    fi
fi

echo $$ > /tmp/worker.pid

cd ~/worker

logger $ONTTY -i -t WORKER -p user.info Worker starting. 

. ~/.bash_aliases

# Log the environment
export | logger $ONTTY -i -t WORKER -p user.info

while [ -s /tmp/worker.pid ] ; do
    # This runs for a bit and then exits to allow us to do administration.
    ./ProcessQueue.py
    status=$?
    if [ $status -ne 0 ] ; then
        logger $ONTTY -i -t WORKER -p user.warning ProcessQueue returned an error ${status}.  Taking a nap.
        sleep 60
    fi
    # Check to see if the AWS box needs a reboot
    if [ -f /var/run/reboot-required ] ; then
        logger $ONTTY -i -t WORKER -p user.notice ProcessQueue detected reboot-required.  Rebooting
        sudo reboot
        exit 0
    fi
    # Check to see if there is new software
    LOCAL=$(git rev-parse master)
    REMOTE=$(git rev-parse origin/master)
    if [ $LOCAL != $REMOTE ] ; then
        git pull
        # Now restart
        logger $ONTTY -i -t WORKER -p user.notice Restarting after update from $LOCAL to $REMOTE
        rm /tmp/worker.pid
        exec $0
    fi
done
logger $ONTTY -i -t WORKER -p user.notice Stopping 
exit 0
